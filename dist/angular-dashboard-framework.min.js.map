{"version":3,"sources":["adf.js","adf.locale.js","column.js","dashboard.js","locale-constant.js","order-by-object-key.js","provider.js","angular-dashboard-framework.min.js","row.js","structure-preview.js","widget-content.js","widget-service.js","widget.js"],"names":["window","undefined","angular","module","value","directive","$log","$compile","$rootScope","adfTemplatePath","rowTemplate","dashboard","moveWidgetInColumn","$scope","column","evt","widgets","$apply","splice","newIndex","oldIndex","$broadcast","findWidget","index","widget","i","length","w","idEquals","wid","findColumn","model","rows","r","j","columns","c","cid","getId","el","id","getAttribute","addWidgetToColumn","targetColumn","from","sourceColumn","item","warn","removeWidgetFromColumn","applySortable","$element","sortable","Sortable","create","group","handle","ghostClass","animation","onAdd","onRemove","onUpdate","on","destroy","restrict","replace","scope","editMode","continuousEditMode","adfModel","options","templateUrl","link","col","isDefined","isArray","cloned","append","$timeout","$uibModal","stringToBoolean","string","toLowerCase","Boolean","copyWidgets","source","target","shift","push","fillStructure","root","counter","forEach","row","isUndefined","readColumns","changeStructure","structure","copy","createConfiguration","type","cfg","config","findFirstWidgetColumn","error","addNewWidgetToModel","name","unshift","isEditModeImmediate","edit","immediate","openEditMode","split","object","size","arr","key","createCategories","categories","category","transclude","collapsible","editable","maximizable","adfWidgetFilter","controller","getNewModalScope","$new","translate","widgetFilter","structureName","$watch","oldVal","newVal","structures","title","titleTemplateUrl","editClass","toggleEditMode","modelCopy","$on","collapseAll","collapseExpandStatus","cancelEditMode","editDashboardDialog","editDashboardScope","adfEditTemplatePath","editTemplateUrl","instance","open","backdrop","info","closeDialog","close","$destroy","addWidgetDialog","addScope","isFunction","adfAddTemplatePath","addTemplateUrl","opts","addWidget","$attr","enableConfirmDelete","constant","defaultLocale","frameworkLocales","en-GB","ADF_COMMON_CLOSE","ADF_COMMON_DELETE","ADF_COMMON_TITLE","ADF_COMMON_CANCEL","ADF_COMMON_APPLY","ADF_COMMON_EDIT_DASHBOARD","ADF_EDIT_DASHBOARD_STRUCTURE_LABEL","ADF_DASHBOARD_TITLE_TOOLTIP_ADD","ADF_DASHBOARD_TITLE_TOOLTIP_SAVE","ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE","ADF_DASHBOARD_TITLE_TOOLTIP_UNDO","ADF_WIDGET_ADD_HEADER","ADF_WIDGET_DELETE_CONFIRM_MESSAGE","ADF_WIDGET_TOOLTIP_REFRESH","ADF_WIDGET_TOOLTIP_MOVE","ADF_WIDGET_TOOLTIP_COLLAPSE","ADF_WIDGET_TOOLTIP_EXPAND","ADF_WIDGET_TOOLTIP_EDIT","ADF_WIDGET_TOOLTIP_FULLSCREEN","ADF_WIDGET_TOOLTIP_REMOVE","sv-SE","filter","$filter","array","objectKey","provider","adfLocale","getLocales","locales","getActiveLocale","activeLocale","label","translation","widgetsPath","messageTemplate","loadingTemplate","customWidgetTemplatePath","defaultApplyFunction","this","extend","reload","frameless","apply","path","template","templatePath","setLocale","locale","Error","addLocale","translations","isString","isObject","$get","Date","getTime","other","toString","columnTemplate","adjustRowHeight","container","height","style","prepareStructure","preview","selected","$q","widgetService","$controller","$injector","compileWidget","currentScope","content","html","templateScope","base","resolvers","$tpl","getTemplate","resolve","promise","get","invoke","all","then","locals","resolveAs","templateCtrl","controllerAs","children","data","contents","reason","msg","factory","$http","$sce","$templateCache","parseUrl","url","parsedUrl","indexOf","substring","exposed","deferred","defer","tpl","getTrustedResourceUrl","success","response","put","reject","preLink","definition","styleClass","fromJson","widgetState","isCollapsed","collapsed","debug","postLink","deleteWidget","remove","deleteScope","deleteTemplateUrl","deleteDialog","createApplyPromise","result","when","editScope","saveDialog","validationError","applyFn","err","event","args","widgetClasses","classes","openFullScreen","fullScreenScope","modalSize","windowClass","compile","pre","post"],"mappings":"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","file":"angular-dashboard-framework.min.js","sourcesContent":["/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '<<adfVersion>>');\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf.locale', [])\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    'use strict';\r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\r\n    'use strict';\r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function copyWidgets(source, target) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (angular.isUndefined(column.rows)){\r\n                copyWidgets(columns[counter], column);\r\n                counter++;\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     * @param name name of the dashboard\r\n     */\r\n    function addNewWidgetToModel(model, widget, name){\r\n      if (model){\r\n        var column = findFirstWidgetColumn(model);\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n\r\n          // broadcast added event\r\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the edit mode of the widget should be opened immediately.\r\n     *\r\n     * @param widget type\r\n     */\r\n    function isEditModeImmediate(type){\r\n      var widget = dashboard.widgets[type];\r\n      return widget && widget.edit && widget.edit.immediate;\r\n    }\r\n\r\n    /**\r\n     * Opens the edit mode of the specified widget.\r\n     *\r\n     * @param dashboard scope\r\n     * @param widget\r\n     */\r\n    function openEditMode($scope, widget){\r\n      // wait some time before fire enter edit mode event\r\n      $timeout(function(){\r\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n      }, 200);\r\n    }\r\n\r\n    /**\r\n     * Splits an object into an array multiple objects inside.\r\n     *\r\n     * @param object source object\r\n     * @param size size of array\r\n     *\r\n     * @return array of splitted objects\r\n     */\r\n    function split(object, size) {\r\n      var arr = [];\r\n      var i = 0;\r\n      angular.forEach(object, function(value, key){\r\n        var index = i++ % size;\r\n        if (!arr[index]){\r\n          arr[index] = {};\r\n        }\r\n        arr[index][key] = value;\r\n      });\r\n      return arr;\r\n    }\r\n\r\n    /**\r\n     * Creates object with the category name as key and an array of widgets as value.\r\n     *\r\n     * @param widgets array of widgets\r\n     *\r\n     * @return array of categories\r\n     */\r\n    function createCategories(widgets){\r\n      var categories = {};\r\n      angular.forEach(widgets, function(widget){\r\n        var category = widget.category;\r\n        // if the widget has no category use a default one\r\n        if (!category){\r\n          category = 'Miscellaneous';\r\n        }\r\n        // push widget to category array\r\n        if (!categories[category]){\r\n          categories[category] = [];\r\n        }\r\n        categories[category].push(widget);\r\n      });\r\n      return categories;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '=',\r\n        editMode: '@',\r\n        continuousEditMode: '=',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '=',\r\n        categories: '@'\r\n      },\r\n      controller: function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = null;\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on adfModel\r\n        $scope.$watch('adfModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.adfModel;\r\n            widgetFilter = $scope.adfWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              if (!model.titleTemplateUrl) {\r\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n        $scope.$watch('editable', function() {\r\n            if ($scope.editable) {\r\n                $scope.options.editable = $scope.editable;\r\n            }\r\n        });\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n        //passs translate function from dashboard so we can translate labels inside html templates\r\n        $scope.translate = dashboard.translate;\r\n\r\n        function getNewModalScope() {\r\n          var scope = $scope.$new();\r\n          //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n          scope.translate = dashboard.translate;\r\n          return scope;\r\n        }\r\n\r\n        $scope.toggleEditMode = function(){\r\n          $scope.editMode = ! $scope.editMode;\r\n          if ($scope.editMode){\r\n            if (!$scope.continuousEditMode) {\r\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n              $rootScope.$broadcast('adfIsEditMode');\r\n            }\r\n          }\r\n\r\n          if (!$scope.editMode){\r\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n          }\r\n        };\r\n\r\n        $scope.$on('adfToggleEditMode', function() {\r\n            $scope.toggleEditMode();\r\n        });\r\n\r\n        $scope.collapseAll = function(collapseExpandStatus){\r\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\r\n        };\r\n\r\n        $scope.cancelEditMode = function(){\r\n          $scope.editMode = false;\r\n          if (!$scope.continuousEditMode) {\r\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n          }\r\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n        };\r\n\r\n        // edit dashboard settings\r\n        $scope.editDashboardDialog = function(){\r\n          var editDashboardScope = getNewModalScope();\r\n          // create a copy of the title, to avoid changing the title to\r\n          // \"dashboard\" if the field is empty\r\n          editDashboardScope.copy = {\r\n            title: model.title\r\n          };\r\n\r\n          // pass dashboard structure to scope\r\n          editDashboardScope.structures = dashboard.structures;\r\n\r\n          // pass split function to scope, to be able to display structures in multiple columns\r\n          editDashboardScope.split = split;\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n          if(model.editTemplateUrl) {\r\n            adfEditTemplatePath = model.editTemplateUrl;\r\n          }\r\n          var instance = $uibModal.open({\r\n            scope: editDashboardScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static',\r\n            size: 'lg'\r\n          });\r\n          editDashboardScope.changeStructure = function(name, structure){\r\n            $log.info('change structure to ' + name);\r\n            changeStructure(model, structure);\r\n            if (model.structure !== name){\r\n              model.structure = name;\r\n            }\r\n          };\r\n          editDashboardScope.closeDialog = function(){\r\n            // copy the new title back to the model\r\n            model.title = editDashboardScope.copy.title;\r\n            // close modal and destroy the scope\r\n            instance.close();\r\n            editDashboardScope.$destroy();\r\n          };\r\n        };\r\n\r\n        // add widget dialog\r\n        $scope.addWidgetDialog = function(){\r\n          var addScope = getNewModalScope();\r\n          var model = $scope.model;\r\n          var widgets;\r\n          if (angular.isFunction(widgetFilter)){\r\n            widgets = {};\r\n            angular.forEach(dashboard.widgets, function(widget, type){\r\n              if (widgetFilter(widget, type, model)){\r\n                widgets[type] = widget;\r\n              }\r\n            });\r\n          } else {\r\n            widgets = dashboard.widgets;\r\n          }\r\n          addScope.widgets = widgets;\r\n\r\n          //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n          addScope.translate = $scope.translate;\r\n\r\n          // pass createCategories function to scope, if categories option is enabled\r\n          if ($scope.options.categories){\r\n            $scope.createCategories = createCategories;\r\n          }\r\n\r\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n          if(model.addTemplateUrl) {\r\n            adfAddTemplatePath = model.addTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: addScope,\r\n            templateUrl: adfAddTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          addScope.addWidget = function(widget){\r\n            var w = {\r\n              type: widget,\r\n              config: createConfiguration(widget)\r\n            };\r\n            addNewWidgetToModel(model, w, name);\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n\r\n            // check for open edit mode immediately\r\n            if (isEditModeImmediate(widget)){\r\n              openEditMode($scope, w);\r\n            }\r\n          };\r\n          addScope.closeDialog = function(){\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n        };\r\n\r\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n      },\r\n      link: function ($scope, $element, $attr) {\r\n        // pass options to scope\r\n        var options = {\r\n          name: $attr.name,\r\n          editable: true,\r\n          enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n          maximizable: stringToBoolean($attr.maximizable),\r\n          collapsible: stringToBoolean($attr.collapsible),\r\n          categories: stringToBoolean($attr.categories)\r\n        };\r\n        if (angular.isDefined($attr.editable)){\r\n          options.editable = stringToBoolean($attr.editable);\r\n        }\r\n        $scope.options = options;\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n  });\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n'use strict';\r\n\r\n/**\r\n* @ngdoc object\r\n* @name adf.locale#adfLocale\r\n* @description\r\n*\r\n* Holds settings and values for framework supported locales\r\n*/\r\nangular.module('adf.locale')\r\n.constant('adfLocale',\r\n  {\r\n    defaultLocale: 'en-GB',\r\n    frameworkLocales: {\r\n      'en-GB': {\r\n        ADF_COMMON_CLOSE: 'Close',\r\n        ADF_COMMON_DELETE: 'Delete',\r\n        ADF_COMMON_TITLE: 'Title',\r\n        ADF_COMMON_CANCEL: 'Cancel',\r\n        ADF_COMMON_APPLY: 'Apply',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\r\n      },\r\n      'sv-SE': {\r\n        ADF_COMMON_CLOSE: 'Stäng',\r\n        ADF_COMMON_DELETE: 'Ta bort',\r\n        ADF_COMMON_TITLE: 'Titel',\r\n        ADF_COMMON_CANCEL: 'Avbryt',\r\n        ADF_COMMON_APPLY: 'Använd',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\r\n      }\r\n    }\r\n  }\r\n);\r\n","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', function($filter) {\r\n    'use strict';\r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', ['adf.locale'])\r\n  .provider('dashboard', function(adfLocale){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n    var customWidgetTemplatePath = null;\r\n\r\n    // default apply function of widget.edit.apply\r\n    var defaultApplyFunction = function(){\r\n      return true;\r\n    };\r\n\r\n    var activeLocale = adfLocale.defaultLocale;\r\n    var locales = adfLocale.frameworkLocales;\r\n\r\n    function getLocales() {\r\n      return locales;\r\n    }\r\n\r\n    function getActiveLocale() {\r\n      return activeLocale;\r\n    }\r\n\r\n    function translate(label) {\r\n      var translation = locales[activeLocale][label];\r\n      return translation ? translation : label;\r\n    }\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `category` - `{string=}` - Category of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *      on the scope of the widget.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *        on the scope of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n    *        The function can use injection.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false,\r\n          apply: defaultApplyFunction\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#customWidgetTemplatePath\r\n     * @propertyOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the container template for the widgets\r\n     *\r\n     * @param {string} path to the custom widget template\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.customWidgetTemplatePath = function(templatePath) {\r\n      customWidgetTemplatePath = templatePath;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#setLocale\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the locale setting of adf\r\n     *\r\n     * @param {string} ISO Language Code\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n     this.setLocale = function(locale){\r\n       if(locales[locale]) {\r\n         activeLocale = locale;\r\n       } else {\r\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\r\n       }\r\n       return this;\r\n     };\r\n\r\n     /**\r\n      * @ngdoc method\r\n      * @name adf.dashboardProvider#addLocale\r\n      * @methodOf adf.dashboardProvider\r\n      * @description\r\n      *\r\n      * Adds a new locale to adf\r\n      *\r\n      * @param {string} ISO Language Code for the new locale\r\n      * @param {object} translations for the locale.\r\n      *\r\n      * @returns {Object} self\r\n      */\r\n      this.addLocale = function(locale, translations){\r\n        if(!angular.isString(locale)) {\r\n          throw new Error('locale must be an string');\r\n        }\r\n\r\n        if(!angular.isObject(translations)) {\r\n          throw new Error('translations must be an object');\r\n        }\r\n\r\n        locales[locale] = translations;\r\n        return this;\r\n      };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    * @property {method} sets locale of adf.\r\n    * @property {Array.<Object>} hold all of the locale translations.\r\n    * @property {string} the active locale setting.\r\n    * @property {method} translation function passed to templates.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n        customWidgetTemplatePath: customWidgetTemplatePath,\r\n        setLocale: this.setLocale,\r\n        locales: getLocales,\r\n        activeLocale: getActiveLocale,\r\n        translate: translate,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         *\r\n         * @param {string} id widget or column id\r\n         * @param {string} other widget or column id\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  });\r\n","(function(window, undefined) {'use strict';\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf', ['adf.provider', 'adf.locale', 'ui.bootstrap'])\r\n  .value('adfTemplatePath', '../src/templates/')\r\n  .value('rowTemplate', '<adf-dashboard-row row=\"row\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"row in column.rows\" />')\r\n  .value('columnTemplate', '<adf-dashboard-column column=\"column\" adf-model=\"adfModel\" options=\"options\" edit-mode=\"editMode\" ng-repeat=\"column in row.columns\" />')\r\n  .value('adfVersion', '0.12.0-SNAPSHOT');\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf.locale', [])\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardColumn', [\"$log\", \"$compile\", \"$rootScope\", \"adfTemplatePath\", \"rowTemplate\", \"dashboard\", function ($log, $compile, $rootScope, adfTemplatePath, rowTemplate, dashboard) {\r\n    \r\n\r\n    /**\r\n     * moves a widget in between a column\r\n     */\r\n    function moveWidgetInColumn($scope, column, evt){\r\n      var widgets = column.widgets;\r\n      // move widget and apply to scope\r\n      $scope.$apply(function(){\r\n        widgets.splice(evt.newIndex, 0, widgets.splice(evt.oldIndex, 1)[0]);\r\n        $rootScope.$broadcast('adfWidgetMovedInColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * finds a widget by its id in the column\r\n     */\r\n    function findWidget(column, index){\r\n      var widget = null;\r\n      for (var i=0; i<column.widgets.length; i++){\r\n        var w = column.widgets[i];\r\n        if (dashboard.idEquals(w.wid,index)){\r\n          widget = w;\r\n          break;\r\n        }\r\n      }\r\n      return widget;\r\n    }\r\n\r\n    /**\r\n     * finds a column by its id in the model\r\n     */\r\n    function findColumn(model, index){\r\n      var column = null;\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var r = model.rows[i];\r\n        for (var j=0; j<r.columns.length; j++){\r\n          var c = r.columns[j];\r\n          if (dashboard.idEquals(c.cid, index)){\r\n            column = c;\r\n            break;\r\n          } else if (c.rows){\r\n            column = findColumn(c, index);\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * get the adf id from an html element\r\n     */\r\n    function getId(el){\r\n      var id = el.getAttribute('adf-id');\r\n      return id ? id : '-1';\r\n    }\r\n\r\n    /**\r\n     * adds a widget to a column\r\n     */\r\n    function addWidgetToColumn($scope, model, targetColumn, evt){\r\n      // find source column\r\n      var cid = getId(evt.from);\r\n      var sourceColumn = findColumn(model, cid);\r\n\r\n      if (sourceColumn){\r\n        // find moved widget\r\n        var wid = getId(evt.item);\r\n        var widget = findWidget(sourceColumn, wid);\r\n\r\n        if (widget){\r\n          // add new item and apply to scope\r\n          $scope.$apply(function(){\r\n            if (!targetColumn.widgets) {\r\n              targetColumn.widgets = [];\r\n            }\r\n            targetColumn.widgets.splice(evt.newIndex, 0, widget);\r\n\r\n            $rootScope.$broadcast('adfWidgetAddedToColumn');\r\n          });\r\n        } else {\r\n          $log.warn('could not find widget with id ' + wid);\r\n        }\r\n      } else {\r\n        $log.warn('could not find column with id ' + cid);\r\n      }\r\n    }\r\n\r\n    /**\r\n     * removes a widget from a column\r\n     */\r\n    function removeWidgetFromColumn($scope, column, evt){\r\n      // remove old item and apply to scope\r\n      $scope.$apply(function(){\r\n        column.widgets.splice(evt.oldIndex, 1);\r\n        $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n      });\r\n    }\r\n\r\n    /**\r\n     * enable sortable\r\n     */\r\n    function applySortable($scope, $element, model, column){\r\n      // enable drag and drop\r\n      var el = $element[0];\r\n      var sortable = Sortable.create(el, {\r\n        group: 'widgets',\r\n        handle: '.adf-move',\r\n        ghostClass: 'placeholder',\r\n        animation: 150,\r\n        onAdd: function(evt){\r\n          addWidgetToColumn($scope, model, column, evt);\r\n        },\r\n        onRemove: function(evt){\r\n          removeWidgetFromColumn($scope, column, evt);\r\n        },\r\n        onUpdate: function(evt){\r\n          moveWidgetInColumn($scope, column, evt);\r\n        }\r\n      });\r\n\r\n      // destroy sortable on column destroy event\r\n      $element.on('$destroy', function () {\r\n        // check sortable element, before calling destroy\r\n        // see https://github.com/sdorra/angular-dashboard-framework/issues/118\r\n        if (sortable.el){\r\n          sortable.destroy();\r\n        }\r\n      });\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        column: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        adfModel: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-column.html',\r\n      link: function ($scope, $element) {\r\n        // set id\r\n        var col = $scope.column;\r\n        if (!col.cid){\r\n          col.cid = dashboard.id();\r\n        }\r\n\r\n        if (angular.isDefined(col.rows) && angular.isArray(col.rows)) {\r\n          // be sure to tell Angular about the injected directive and push the new row directive to the column\r\n          $compile(rowTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        } else {\r\n          // enable drag and drop for widget only columns\r\n          applySortable($scope, $element, $scope.adfModel, col);\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n/**\r\n * @ngdoc directive\r\n * @name adf.directive:adfDashboard\r\n * @element div\r\n * @restrict EA\r\n * @scope\r\n * @description\r\n *\r\n * `adfDashboard` is a directive which renders the dashboard with all its\r\n * components. The directive requires a name attribute. The name of the\r\n * dashboard can be used to store the model.\r\n *\r\n * @param {string} name name of the dashboard. This attribute is required.\r\n * @param {boolean=} editable false to disable the editmode of the dashboard.\r\n * @param {boolean=} collapsible true to make widgets collapsible on the dashboard.\r\n * @param {boolean=} maximizable true to add a button for open widgets in a large modal panel.\r\n * @param {boolean=} enableConfirmDelete true to ask before remove an widget from the dashboard.\r\n * @param {string=} structure the default structure of the dashboard.\r\n * @param {object=} adfModel model object of the dashboard.\r\n * @param {function=} adfWidgetFilter function to filter widgets on the add dialog.\r\n * @param {boolean=} continuousEditMode enable continuous edit mode, to fire add/change/remove\r\n *                   events during edit mode not reset it if edit mode is exited.\r\n * @param {boolean=} categories enable categories for the add widget dialog.\r\n */\r\n\r\nangular.module('adf')\r\n  .directive('adfDashboard', [\"$rootScope\", \"$log\", \"$timeout\", \"$uibModal\", \"dashboard\", \"adfTemplatePath\", function ($rootScope, $log, $timeout, $uibModal, dashboard, adfTemplatePath) {\r\n    \r\n\r\n    function stringToBoolean(string){\r\n      switch(angular.isDefined(string) ? string.toLowerCase() : null){\r\n        case 'true': case 'yes': case '1': return true;\r\n        case 'false': case 'no': case '0': case null: return false;\r\n        default: return Boolean(string);\r\n      }\r\n    }\r\n\r\n    function copyWidgets(source, target) {\r\n      if ( source.widgets && source.widgets.length > 0 ){\r\n        var w = source.widgets.shift();\r\n        while (w){\r\n          target.widgets.push(w);\r\n          w = source.widgets.shift();\r\n        }\r\n      }\r\n    }\r\n\r\n    /**\r\n    * Copy widget from old columns to the new model\r\n    * @param object root the model\r\n    * @param array of columns\r\n    * @param counter\r\n    */\r\n    function fillStructure(root, columns, counter) {\r\n      counter = counter || 0;\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (column) {\r\n            // if the widgets prop doesn't exist, create a new array for it.\r\n            // this allows ui.sortable to do it's thing without error\r\n            if (!column.widgets) {\r\n              column.widgets = [];\r\n            }\r\n\r\n            // if a column exist at the counter index, copy over the column\r\n            if (angular.isDefined(columns[counter])) {\r\n              // do not add widgets to a column, which uses nested rows\r\n              if (angular.isUndefined(column.rows)){\r\n                copyWidgets(columns[counter], column);\r\n                counter++;\r\n              }\r\n            }\r\n\r\n            // run fillStructure again for any sub rows/columns\r\n            counter = fillStructure(column, columns, counter);\r\n          });\r\n        });\r\n      }\r\n      return counter;\r\n    }\r\n\r\n    /**\r\n    * Read Columns: recursively searches an object for the 'columns' property\r\n    * @param object model\r\n    * @param array  an array of existing columns; used when recursion happens\r\n    */\r\n    function readColumns(root, columns) {\r\n      columns = columns || [];\r\n\r\n      if (angular.isDefined(root.rows)) {\r\n        angular.forEach(root.rows, function (row) {\r\n          angular.forEach(row.columns, function (col) {\r\n            columns.push(col);\r\n            // keep reading columns until we can't any more\r\n            readColumns(col, columns);\r\n          });\r\n        });\r\n      }\r\n\r\n      return columns;\r\n    }\r\n\r\n    function changeStructure(model, structure){\r\n      var columns = readColumns(model);\r\n      var counter = 0;\r\n\r\n      model.rows = angular.copy(structure.rows);\r\n\r\n      while ( counter < columns.length ){\r\n        counter = fillStructure(model, columns, counter);\r\n      }\r\n    }\r\n\r\n    function createConfiguration(type){\r\n      var cfg = {};\r\n      var config = dashboard.widgets[type].config;\r\n      if (config){\r\n        cfg = angular.copy(config);\r\n      }\r\n      return cfg;\r\n    }\r\n\r\n    /**\r\n     * Find first widget column in model.\r\n     *\r\n     * @param dashboard model\r\n     */\r\n    function findFirstWidgetColumn(model){\r\n      var column = null;\r\n      if (!angular.isArray(model.rows)){\r\n        $log.error('model does not have any rows');\r\n        return null;\r\n      }\r\n      for (var i=0; i<model.rows.length; i++){\r\n        var row = model.rows[i];\r\n        if (angular.isArray(row.columns)){\r\n          for (var j=0; j<row.columns.length; j++){\r\n            var col = row.columns[j];\r\n            if (!col.rows){\r\n              column = col;\r\n              break;\r\n            }\r\n          }\r\n        }\r\n        if (column){\r\n          break;\r\n        }\r\n      }\r\n      return column;\r\n    }\r\n\r\n    /**\r\n     * Adds the widget to first column of the model.\r\n     *\r\n     * @param dashboard model\r\n     * @param widget to add to model\r\n     * @param name name of the dashboard\r\n     */\r\n    function addNewWidgetToModel(model, widget, name){\r\n      if (model){\r\n        var column = findFirstWidgetColumn(model);\r\n        if (column){\r\n          if (!column.widgets){\r\n            column.widgets = [];\r\n          }\r\n          column.widgets.unshift(widget);\r\n\r\n          // broadcast added event\r\n          $rootScope.$broadcast('adfWidgetAdded', name, model, widget);\r\n        } else {\r\n          $log.error('could not find first widget column');\r\n        }\r\n      } else {\r\n        $log.error('model is undefined');\r\n      }\r\n    }\r\n\r\n    /**\r\n     * Checks if the edit mode of the widget should be opened immediately.\r\n     *\r\n     * @param widget type\r\n     */\r\n    function isEditModeImmediate(type){\r\n      var widget = dashboard.widgets[type];\r\n      return widget && widget.edit && widget.edit.immediate;\r\n    }\r\n\r\n    /**\r\n     * Opens the edit mode of the specified widget.\r\n     *\r\n     * @param dashboard scope\r\n     * @param widget\r\n     */\r\n    function openEditMode($scope, widget){\r\n      // wait some time before fire enter edit mode event\r\n      $timeout(function(){\r\n        $scope.$broadcast('adfWidgetEnterEditMode', widget);\r\n      }, 200);\r\n    }\r\n\r\n    /**\r\n     * Splits an object into an array multiple objects inside.\r\n     *\r\n     * @param object source object\r\n     * @param size size of array\r\n     *\r\n     * @return array of splitted objects\r\n     */\r\n    function split(object, size) {\r\n      var arr = [];\r\n      var i = 0;\r\n      angular.forEach(object, function(value, key){\r\n        var index = i++ % size;\r\n        if (!arr[index]){\r\n          arr[index] = {};\r\n        }\r\n        arr[index][key] = value;\r\n      });\r\n      return arr;\r\n    }\r\n\r\n    /**\r\n     * Creates object with the category name as key and an array of widgets as value.\r\n     *\r\n     * @param widgets array of widgets\r\n     *\r\n     * @return array of categories\r\n     */\r\n    function createCategories(widgets){\r\n      var categories = {};\r\n      angular.forEach(widgets, function(widget){\r\n        var category = widget.category;\r\n        // if the widget has no category use a default one\r\n        if (!category){\r\n          category = 'Miscellaneous';\r\n        }\r\n        // push widget to category array\r\n        if (!categories[category]){\r\n          categories[category] = [];\r\n        }\r\n        categories[category].push(widget);\r\n      });\r\n      return categories;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude : false,\r\n      scope: {\r\n        structure: '@',\r\n        name: '@',\r\n        collapsible: '@',\r\n        editable: '=',\r\n        editMode: '@',\r\n        continuousEditMode: '=',\r\n        maximizable: '@',\r\n        adfModel: '=',\r\n        adfWidgetFilter: '=',\r\n        categories: '@'\r\n      },\r\n      controller: [\"$scope\", function($scope){\r\n        var model = {};\r\n        var structure = {};\r\n        var widgetFilter = null;\r\n        var structureName = {};\r\n        var name = $scope.name;\r\n\r\n        // Watching for changes on adfModel\r\n        $scope.$watch('adfModel', function(oldVal, newVal) {\r\n          // has model changed or is the model attribute not set\r\n          if (newVal !== null || (oldVal === null && newVal === null)) {\r\n            model = $scope.adfModel;\r\n            widgetFilter = $scope.adfWidgetFilter;\r\n            if ( ! model || ! model.rows ){\r\n              structureName = $scope.structure;\r\n              structure = dashboard.structures[structureName];\r\n              if (structure){\r\n                if (model){\r\n                  model.rows = angular.copy(structure).rows;\r\n                } else {\r\n                  model = angular.copy(structure);\r\n                }\r\n                model.structure = structureName;\r\n              } else {\r\n                $log.error( 'could not find structure ' + structureName);\r\n              }\r\n            }\r\n\r\n            if (model) {\r\n              if (!model.title){\r\n                model.title = 'Dashboard';\r\n              }\r\n              if (!model.titleTemplateUrl) {\r\n                model.titleTemplateUrl = adfTemplatePath + 'dashboard-title.html';\r\n              }\r\n              $scope.model = model;\r\n            } else {\r\n              $log.error('could not find or create model');\r\n            }\r\n          }\r\n        }, true);\r\n        $scope.$watch('editable', function() {\r\n            if ($scope.editable) {\r\n                $scope.options.editable = $scope.editable;\r\n            }\r\n        });\r\n        // edit mode\r\n        $scope.editMode = false;\r\n        $scope.editClass = '';\r\n\r\n        //passs translate function from dashboard so we can translate labels inside html templates\r\n        $scope.translate = dashboard.translate;\r\n\r\n        function getNewModalScope() {\r\n          var scope = $scope.$new();\r\n          //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n          scope.translate = dashboard.translate;\r\n          return scope;\r\n        }\r\n\r\n        $scope.toggleEditMode = function(){\r\n          $scope.editMode = ! $scope.editMode;\r\n          if ($scope.editMode){\r\n            if (!$scope.continuousEditMode) {\r\n              $scope.modelCopy = angular.copy($scope.adfModel, {});\r\n              $rootScope.$broadcast('adfIsEditMode');\r\n            }\r\n          }\r\n\r\n          if (!$scope.editMode){\r\n            $rootScope.$broadcast('adfDashboardChanged', name, model);\r\n          }\r\n        };\r\n\r\n        $scope.$on('adfToggleEditMode', function() {\r\n            $scope.toggleEditMode();\r\n        });\r\n\r\n        $scope.collapseAll = function(collapseExpandStatus){\r\n          $rootScope.$broadcast('adfDashboardCollapseExpand',{collapseExpandStatus : collapseExpandStatus});\r\n        };\r\n\r\n        $scope.cancelEditMode = function(){\r\n          $scope.editMode = false;\r\n          if (!$scope.continuousEditMode) {\r\n            $scope.modelCopy = angular.copy($scope.modelCopy, $scope.adfModel);\r\n          }\r\n          $rootScope.$broadcast('adfDashboardEditsCancelled');\r\n        };\r\n\r\n        // edit dashboard settings\r\n        $scope.editDashboardDialog = function(){\r\n          var editDashboardScope = getNewModalScope();\r\n          // create a copy of the title, to avoid changing the title to\r\n          // \"dashboard\" if the field is empty\r\n          editDashboardScope.copy = {\r\n            title: model.title\r\n          };\r\n\r\n          // pass dashboard structure to scope\r\n          editDashboardScope.structures = dashboard.structures;\r\n\r\n          // pass split function to scope, to be able to display structures in multiple columns\r\n          editDashboardScope.split = split;\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'dashboard-edit.html';\r\n          if(model.editTemplateUrl) {\r\n            adfEditTemplatePath = model.editTemplateUrl;\r\n          }\r\n          var instance = $uibModal.open({\r\n            scope: editDashboardScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static',\r\n            size: 'lg'\r\n          });\r\n          editDashboardScope.changeStructure = function(name, structure){\r\n            $log.info('change structure to ' + name);\r\n            changeStructure(model, structure);\r\n            if (model.structure !== name){\r\n              model.structure = name;\r\n            }\r\n          };\r\n          editDashboardScope.closeDialog = function(){\r\n            // copy the new title back to the model\r\n            model.title = editDashboardScope.copy.title;\r\n            // close modal and destroy the scope\r\n            instance.close();\r\n            editDashboardScope.$destroy();\r\n          };\r\n        };\r\n\r\n        // add widget dialog\r\n        $scope.addWidgetDialog = function(){\r\n          var addScope = getNewModalScope();\r\n          var model = $scope.model;\r\n          var widgets;\r\n          if (angular.isFunction(widgetFilter)){\r\n            widgets = {};\r\n            angular.forEach(dashboard.widgets, function(widget, type){\r\n              if (widgetFilter(widget, type, model)){\r\n                widgets[type] = widget;\r\n              }\r\n            });\r\n          } else {\r\n            widgets = dashboard.widgets;\r\n          }\r\n          addScope.widgets = widgets;\r\n\r\n          //pass translate function to the new scope so we can translate the labels inside the modal dialog\r\n          addScope.translate = $scope.translate;\r\n\r\n          // pass createCategories function to scope, if categories option is enabled\r\n          if ($scope.options.categories){\r\n            $scope.createCategories = createCategories;\r\n          }\r\n\r\n          var adfAddTemplatePath = adfTemplatePath + 'widget-add.html';\r\n          if(model.addTemplateUrl) {\r\n            adfAddTemplatePath = model.addTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: addScope,\r\n            templateUrl: adfAddTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          addScope.addWidget = function(widget){\r\n            var w = {\r\n              type: widget,\r\n              config: createConfiguration(widget)\r\n            };\r\n            addNewWidgetToModel(model, w, name);\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n\r\n            // check for open edit mode immediately\r\n            if (isEditModeImmediate(widget)){\r\n              openEditMode($scope, w);\r\n            }\r\n          };\r\n          addScope.closeDialog = function(){\r\n            // close and destroy\r\n            instance.close();\r\n            addScope.$destroy();\r\n          };\r\n        };\r\n\r\n        $scope.addNewWidgetToModel = addNewWidgetToModel;\r\n      }],\r\n      link: function ($scope, $element, $attr) {\r\n        // pass options to scope\r\n        var options = {\r\n          name: $attr.name,\r\n          editable: true,\r\n          enableConfirmDelete: stringToBoolean($attr.enableConfirmDelete),\r\n          maximizable: stringToBoolean($attr.maximizable),\r\n          collapsible: stringToBoolean($attr.collapsible),\r\n          categories: stringToBoolean($attr.categories)\r\n        };\r\n        if (angular.isDefined($attr.editable)){\r\n          options.editable = stringToBoolean($attr.editable);\r\n        }\r\n        $scope.options = options;\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard.html'\r\n    };\r\n  }]);\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n\r\n/**\r\n* @ngdoc object\r\n* @name adf.locale#adfLocale\r\n* @description\r\n*\r\n* Holds settings and values for framework supported locales\r\n*/\r\nangular.module('adf.locale')\r\n.constant('adfLocale',\r\n  {\r\n    defaultLocale: 'en-GB',\r\n    frameworkLocales: {\r\n      'en-GB': {\r\n        ADF_COMMON_CLOSE: 'Close',\r\n        ADF_COMMON_DELETE: 'Delete',\r\n        ADF_COMMON_TITLE: 'Title',\r\n        ADF_COMMON_CANCEL: 'Cancel',\r\n        ADF_COMMON_APPLY: 'Apply',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Edit dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Structure',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Add new widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Save changes',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Enable edit mode',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Undo changes',\r\n        ADF_WIDGET_ADD_HEADER: 'Add new widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Are you sure you want to delete this widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Reload widget Content',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Change widget location',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Collapse widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Expand widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Edit widget configuration',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Fullscreen widget',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Remove widget'\r\n      },\r\n      'sv-SE': {\r\n        ADF_COMMON_CLOSE: 'Stäng',\r\n        ADF_COMMON_DELETE: 'Ta bort',\r\n        ADF_COMMON_TITLE: 'Titel',\r\n        ADF_COMMON_CANCEL: 'Avbryt',\r\n        ADF_COMMON_APPLY: 'Använd',\r\n        ADF_COMMON_EDIT_DASHBOARD: 'Redigera dashboard',\r\n        ADF_EDIT_DASHBOARD_STRUCTURE_LABEL: 'Struktur',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_ADD: 'Lägg till ny widget',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_SAVE: 'Spara förändringar',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_EDIT_MODE: 'Slå på redigeringsläge',\r\n        ADF_DASHBOARD_TITLE_TOOLTIP_UNDO: 'Ångra förändringar',\r\n        ADF_WIDGET_ADD_HEADER: 'Lägg till ny widget',\r\n        ADF_WIDGET_DELETE_CONFIRM_MESSAGE: 'Är du säker på att du vill ta bort denna widget ?',\r\n        ADF_WIDGET_TOOLTIP_REFRESH: 'Ladda om widget',\r\n        ADF_WIDGET_TOOLTIP_MOVE: 'Ändra widgets position',\r\n        ADF_WIDGET_TOOLTIP_COLLAPSE: 'Stäng widget',\r\n        ADF_WIDGET_TOOLTIP_EXPAND: 'Öppna widget',\r\n        ADF_WIDGET_TOOLTIP_EDIT: 'Ändra widget konfigurering',\r\n        ADF_WIDGET_TOOLTIP_FULLSCREEN: 'Visa widget i fullskärm',\r\n        ADF_WIDGET_TOOLTIP_REMOVE: 'Ta bort widget'\r\n      }\r\n    }\r\n  }\r\n);\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .filter('adfOrderByObjectKey', [\"$filter\", function($filter) {\r\n    \r\n\r\n    return function(item, key){\r\n      var array = [];\r\n      angular.forEach(item, function(value, objectKey){\r\n        value[key] = objectKey;\r\n        array.push(value);\r\n      });\r\n      return $filter('orderBy')(array, key);\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/**\r\n * @ngdoc object\r\n * @name adf.dashboardProvider\r\n * @description\r\n *\r\n * The dashboardProvider can be used to register structures and widgets.\r\n */\r\nangular.module('adf.provider', ['adf.locale'])\r\n  .provider('dashboard', [\"adfLocale\", function(adfLocale){\r\n\r\n    var widgets = {};\r\n    var widgetsPath = '';\r\n    var structures = {};\r\n    var messageTemplate = '<div class=\"alert alert-danger\">{}</div>';\r\n    var loadingTemplate = '\\\r\n      <div class=\"progress progress-striped active\">\\n\\\r\n        <div class=\"progress-bar\" role=\"progressbar\" style=\"width: 100%\">\\n\\\r\n          <span class=\"sr-only\">loading ...</span>\\n\\\r\n        </div>\\n\\\r\n      </div>';\r\n    var customWidgetTemplatePath = null;\r\n\r\n    // default apply function of widget.edit.apply\r\n    var defaultApplyFunction = function(){\r\n      return true;\r\n    };\r\n\r\n    var activeLocale = adfLocale.defaultLocale;\r\n    var locales = adfLocale.frameworkLocales;\r\n\r\n    function getLocales() {\r\n      return locales;\r\n    }\r\n\r\n    function getActiveLocale() {\r\n      return activeLocale;\r\n    }\r\n\r\n    function translate(label) {\r\n      var translation = locales[activeLocale][label];\r\n      return translation ? translation : label;\r\n    }\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#widget\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new widget.\r\n    *\r\n    * @param {string} name of the widget\r\n    * @param {object} widget to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `title` - `{string=}` - The title of the widget.\r\n    *   - `description` - `{string=}` - Description of the widget.\r\n    *   - `category` - `{string=}` - Category of the widget.\r\n    *   - `collapsed` - `{boolean=}` - true if the widget should be in collapsed state. Default is false.\r\n    *   - `config` - `{object}` - Predefined widget configuration.\r\n    *   - `controller` - `{string=|function()=}` - Controller fn that should be\r\n    *      associated with newly created scope of the widget or the name of a\r\n    *      {@link http://docs.angularjs.org/api/angular.Module#controller registered controller}\r\n    *      if passed as a string.\r\n    *   - `controllerAs` - `{string=}` - A controller alias name. If present the controller will be\r\n    *      published to scope under the `controllerAs` name.\r\n    *   - `frameless` - `{boolean=}` - false if the widget should be shown in frameless mode. The default is false.\r\n    *   - `styleClass` - `{object}` - space delimited string or map of classes bound to the widget.\r\n    *   - `template` - `{string=|function()=}` - html template as a string.\r\n    *   - `templateUrl` - `{string=}` - path to an html template.\r\n    *   - `reload` - `{boolean=}` - true if the widget could be reloaded. The default is false.\r\n    *   - `resolve` - `{Object.<string, function>=}` - An optional map of dependencies which should\r\n    *      be injected into the controller. If any of these dependencies are promises, the widget\r\n    *      will wait for them all to be resolved or one to be rejected before the controller is\r\n    *      instantiated.\r\n    *      If all the promises are resolved successfully, the values of the resolved promises are\r\n    *      injected.\r\n    *\r\n    *      The map object is:\r\n    *      - `key` – `{string}`: a name of a dependency to be injected into the controller.\r\n    *      - `factory` - `{string|function}`: If `string` then it is an alias for a service.\r\n    *        Otherwise if function, then it is {@link http://docs.angularjs.org/api/AUTO.$injector#invoke injected}\r\n    *        and the return value is treated as the dependency. If the result is a promise, it is\r\n    *        resolved before its value is injected into the controller.\r\n    *   - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *      on the scope of the widget.\r\n    *   - `edit` - `{object}` - Edit modus of the widget.\r\n    *      - `controller` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `controllerAs` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `template` - `{string=|function()=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `templateUrl` - `{string=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolve` - `{Object.<string, function>=}` - Same as above, but for the edit mode of the widget.\r\n    *      - `resolveAs` - `{string=}` - The name under which the resolve map will be available\r\n    *        on the scope of the widget.\r\n    *      - `reload` - {boolean} - true if the widget should be reloaded, after the edit mode is closed.\r\n    *        Default is true.\r\n    *      - `immediate` - {boolean} - The widget enters the edit mode immediately after creation. Default is false.\r\n    *      - `apply` - `{function()=}` - The apply function is called, before the widget is saved.\r\n    *        The function have to return a boolean or an promise which can be resolved to a boolean.\r\n    *        The function can use injection.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.widget = function(name, widget){\r\n      var w = angular.extend({reload: false, frameless: false}, widget);\r\n      if ( w.edit ){\r\n        var edit = {\r\n          reload: true,\r\n          immediate: false,\r\n          apply: defaultApplyFunction\r\n        };\r\n        angular.extend(edit, w.edit);\r\n        w.edit = edit;\r\n      }\r\n      widgets[name] = w;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#widgetsPath\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Sets the path to the directory which contains the widgets. The widgets\r\n     * path is used for widgets with a templateUrl which contains the\r\n     * placeholder {widgetsPath}. The placeholder is replaced with the\r\n     * configured value, before the template is loaded, but the template is\r\n     * cached with the unmodified templateUrl (e.g.: {widgetPath}/src/widgets).\r\n     * The default value of widgetPaths is ''.\r\n     *\r\n     *\r\n     * @param {string} path to the directory which contains the widgets\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.widgetsPath = function(path){\r\n      widgetsPath = path;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#structure\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Registers a new structure.\r\n    *\r\n    * @param {string} name of the structure\r\n    * @param {object} structure to be registered.\r\n    *\r\n    *   Object properties:\r\n    *\r\n    *   - `rows` - `{Array.<Object>}` - Rows of the dashboard structure.\r\n    *     - `styleClass` - `{string}` - CSS Class of the row.\r\n    *     - `columns` - `{Array.<Object>}` - Columns of the row.\r\n    *       - `styleClass` - `{string}` - CSS Class of the column.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.structure = function(name, structure){\r\n      structures[name] = structure;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#messageTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template for messages.\r\n    *\r\n    * @param {string} template for messages.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.messageTemplate = function(template){\r\n      messageTemplate = template;\r\n      return this;\r\n    };\r\n\r\n   /**\r\n    * @ngdoc method\r\n    * @name adf.dashboardProvider#loadingTemplate\r\n    * @methodOf adf.dashboardProvider\r\n    * @description\r\n    *\r\n    * Changes the template which is displayed as\r\n    * long as the widget resources are not resolved.\r\n    *\r\n    * @param {string} template loading template\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.loadingTemplate = function(template){\r\n      loadingTemplate = template;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#customWidgetTemplatePath\r\n     * @propertyOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the container template for the widgets\r\n     *\r\n     * @param {string} path to the custom widget template\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n    this.customWidgetTemplatePath = function(templatePath) {\r\n      customWidgetTemplatePath = templatePath;\r\n      return this;\r\n    };\r\n\r\n    /**\r\n     * @ngdoc method\r\n     * @name adf.dashboardProvider#setLocale\r\n     * @methodOf adf.dashboardProvider\r\n     * @description\r\n     *\r\n     * Changes the locale setting of adf\r\n     *\r\n     * @param {string} ISO Language Code\r\n     *\r\n     * @returns {Object} self\r\n     */\r\n     this.setLocale = function(locale){\r\n       if(locales[locale]) {\r\n         activeLocale = locale;\r\n       } else {\r\n         throw new Error('Cannot set locale: ' + locale + '. Locale is not defined.');\r\n       }\r\n       return this;\r\n     };\r\n\r\n     /**\r\n      * @ngdoc method\r\n      * @name adf.dashboardProvider#addLocale\r\n      * @methodOf adf.dashboardProvider\r\n      * @description\r\n      *\r\n      * Adds a new locale to adf\r\n      *\r\n      * @param {string} ISO Language Code for the new locale\r\n      * @param {object} translations for the locale.\r\n      *\r\n      * @returns {Object} self\r\n      */\r\n      this.addLocale = function(locale, translations){\r\n        if(!angular.isString(locale)) {\r\n          throw new Error('locale must be an string');\r\n        }\r\n\r\n        if(!angular.isObject(translations)) {\r\n          throw new Error('translations must be an object');\r\n        }\r\n\r\n        locales[locale] = translations;\r\n        return this;\r\n      };\r\n\r\n   /**\r\n    * @ngdoc service\r\n    * @name adf.dashboard\r\n    * @description\r\n    *\r\n    * The dashboard holds all options, structures and widgets.\r\n    *\r\n    * @property {Array.<Object>} widgets Array of registered widgets.\r\n    * @property {string} widgetsPath Default path for widgets.\r\n    * @property {Array.<Object>} structures Array of registered structures.\r\n    * @property {string} messageTemplate Template for messages.\r\n    * @property {string} loadingTemplate Template for widget loading.\r\n    * @property {method} sets locale of adf.\r\n    * @property {Array.<Object>} hold all of the locale translations.\r\n    * @property {string} the active locale setting.\r\n    * @property {method} translation function passed to templates.\r\n    *\r\n    * @returns {Object} self\r\n    */\r\n    this.$get = function(){\r\n      var cid = 0;\r\n\r\n      return {\r\n        widgets: widgets,\r\n        widgetsPath: widgetsPath,\r\n        structures: structures,\r\n        messageTemplate: messageTemplate,\r\n        loadingTemplate: loadingTemplate,\r\n        customWidgetTemplatePath: customWidgetTemplatePath,\r\n        setLocale: this.setLocale,\r\n        locales: getLocales,\r\n        activeLocale: getActiveLocale,\r\n        translate: translate,\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#id\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Creates an ongoing numeric id. The method is used to create ids for\r\n         * columns and widgets in the dashboard.\r\n         */\r\n        id: function(){\r\n          return new Date().getTime() + '-' + (++cid);\r\n        },\r\n\r\n        /**\r\n         * @ngdoc method\r\n         * @name adf.dashboard#idEqual\r\n         * @methodOf adf.dashboard\r\n         * @description\r\n         *\r\n         * Checks if the given ids are equal.\r\n         *\r\n         * @param {string} id widget or column id\r\n         * @param {string} other widget or column id\r\n         */\r\n         idEquals: function(id, other){\r\n           // use toString, because old ids are numbers\r\n           return ((id) && (other)) && (id.toString() === other.toString());\r\n         }\r\n      };\r\n    };\r\n\r\n  }]);\r\n\n/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', [\"$compile\", \"adfTemplatePath\", \"columnTemplate\", function ($compile, adfTemplatePath, columnTemplate) {\r\n    \r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', [\"adfTemplatePath\", function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', [\"$log\", \"$q\", \"widgetService\", \"$compile\", \"$controller\", \"$injector\", \"dashboard\", function($log, $q, widgetService,\r\n          $compile, $controller, $injector, dashboard) {\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = widgetService.getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // pass resolve map to template scope as defined in resolveAs\r\n        if (content.resolveAs){\r\n          templateScope[content.resolveAs] = locals;\r\n        }\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs) {\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope) {\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  }]);\r\n\n\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', [\"$http\", \"$q\", \"$sce\", \"$templateCache\", \"dashboard\", function($http, $q, $sce, $templateCache, dashboard) {\r\n    \r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  }]);\r\n\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', [\"$injector\", \"$q\", \"$log\", \"$uibModal\", \"$rootScope\", \"dashboard\", \"adfTemplatePath\", function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\r\n\r\n    function preLink($scope) {\r\n      var definition = $scope.definition;\r\n\r\n      //passs translate function from dashboard so we can translate labels inside html templates\r\n      $scope.translate = dashboard.translate;\r\n\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title) {\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n            if (w.titleTemplateUrl) {\r\n              definition.titleTemplateUrl = w.titleTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.editTemplateUrl) {\r\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n            if (w.editTemplateUrl) {\r\n              definition.editTemplateUrl = w.editTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.frameless = w.frameless;\r\n          }\r\n\r\n          if (!definition.styleClass) {\r\n            definition.styleClass = w.styleClass;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid) {\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n          if (!$scope.widgetState) {\r\n            $scope.widgetState = {};\r\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n\r\n        var deleteWidget = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n        };\r\n\r\n        $scope.remove = function() {\r\n          if ($scope.options.enableConfirmDelete) {\r\n            var deleteScope = $scope.$new();\r\n            deleteScope.translate = dashboard.translate;\r\n\r\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n            if (definition.deleteTemplateUrl) {\r\n              deleteTemplateUrl = definition.deleteTemplateUrl;\r\n            }\r\n            var opts = {\r\n              scope: deleteScope,\r\n              templateUrl: deleteTemplateUrl,\r\n              backdrop: 'static'\r\n            };\r\n            var instance = $uibModal.open(opts);\r\n\r\n            deleteScope.closeDialog = function() {\r\n              instance.close();\r\n              deleteScope.$destroy();\r\n            };\r\n            deleteScope.deleteDialog = function() {\r\n              deleteWidget();\r\n              deleteScope.closeDialog();\r\n            };\r\n          } else {\r\n            deleteWidget();\r\n          }\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function() {\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.translate = dashboard.translate;\r\n          editScope.definition = angular.copy(definition);\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n          if (definition.editTemplateUrl) {\r\n            adfEditTemplatePath = definition.editTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n\r\n          editScope.closeDialog = function() {\r\n            instance.close();\r\n            editScope.$destroy();\r\n          };\r\n\r\n          // TODO create util method\r\n          function createApplyPromise(result){\r\n            var promise;\r\n            if (typeof result === 'boolean'){\r\n              var deferred = $q.defer();\r\n              if (result){\r\n                deferred.resolve();\r\n              } else {\r\n                deferred.reject();\r\n              }\r\n              promise = deferred.promise;\r\n            } else {\r\n              promise = $q.when(result);\r\n            }\r\n            return promise;\r\n          }\r\n\r\n          editScope.saveDialog = function() {\r\n            // clear validation error\r\n            editScope.validationError = null;\r\n\r\n            // build injection locals\r\n            var widget = $scope.widget;\r\n\r\n            // create a default apply method for widgets\r\n            // without edit mode\r\n            // see issue https://goo.gl/KHPQLZ\r\n            var applyFn;\r\n            if (widget.edit){\r\n              applyFn = widget.edit.apply;\r\n            } else {\r\n              applyFn = function(){\r\n                return true;\r\n              };\r\n            }\r\n\r\n            // injection locals\r\n            var locals = {\r\n              widget: widget,\r\n              definition: editScope.definition,\r\n              config: editScope.definition.config\r\n            };\r\n\r\n            // invoke apply function and apply if success\r\n            var result = $injector.invoke(applyFn, applyFn, locals);\r\n            createApplyPromise(result).then(function(){\r\n              definition.title = editScope.definition.title;\r\n              angular.extend(definition.config, editScope.definition.config);\r\n              if (widget.edit && widget.edit.reload) {\r\n                // reload content after edit dialog is closed\r\n                $scope.$broadcast('widgetConfigChanged');\r\n              }\r\n              editScope.closeDialog();\r\n            }, function(err){\r\n              if (err){\r\n                editScope.validationError = err;\r\n              } else {\r\n                editScope.validationError = 'Validation durring apply failed';\r\n              }\r\n            });\r\n          };\r\n\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n      controller: [\"$scope\", function($scope) {\r\n\r\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n        });\r\n\r\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\r\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\r\n            $scope.edit();\r\n          }\r\n        });\r\n\r\n        $scope.widgetClasses = function(w, definition){\r\n          var classes = definition.styleClass || '';\r\n          if (!w.frameless || $scope.editMode){\r\n            classes += ' panel panel-default';\r\n          }\r\n          return classes;\r\n        };\r\n\r\n        $scope.openFullScreen = function() {\r\n          var definition = $scope.definition;\r\n          var fullScreenScope = $scope.$new();\r\n          var opts = {\r\n            scope: fullScreenScope,\r\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n            backdrop: 'static',\r\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          fullScreenScope.closeDialog = function() {\r\n            instance.close();\r\n            fullScreenScope.$destroy();\r\n          };\r\n        };\r\n      }],\r\n      compile: function() {\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  }]);\r\n\n})(window);","/*\r\n* The MIT License\r\n*\r\n* Copyright (c) 2015, Sebastian Sdorra\r\n*\r\n* Permission is hereby granted, free of charge, to any person obtaining a copy\r\n* of this software and associated documentation files (the \"Software\"), to deal\r\n* in the Software without restriction, including without limitation the rights\r\n* to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n* copies of the Software, and to permit persons to whom the Software is\r\n* furnished to do so, subject to the following conditions:\r\n*\r\n* The above copyright notice and this permission notice shall be included in\r\n* all copies or substantial portions of the Software.\r\n*\r\n* THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n* IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n* FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n* AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n* LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n* OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n* SOFTWARE.\r\n*/\r\n\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfDashboardRow', function ($compile, adfTemplatePath, columnTemplate) {\r\n    'use strict';\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        row: '=',\r\n        adfModel: '=',\r\n        editMode: '=',\r\n        continuousEditMode: '=',\r\n        options: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'dashboard-row.html',\r\n      link: function($scope, $element) {\r\n        if (angular.isDefined($scope.row.columns) && angular.isArray($scope.row.columns)) {\r\n          $compile(columnTemplate)($scope, function(cloned) {\r\n            $element.append(cloned);\r\n          });\r\n        }\r\n      }\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\n/* global angular */\r\nangular.module('adf')\r\n  .directive('adfStructurePreview', function(adfTemplatePath) {\r\n\r\n    function adjustRowHeight(container){\r\n      if (container.rows && container.rows.length > 0){\r\n        var height = 100 / container.rows.length;\r\n        angular.forEach(container.rows, function(row){\r\n          row.style = {\r\n            height: height + '%'\r\n          }\r\n\r\n          if (row.columns){\r\n            angular.forEach(row.columns, function(column){\r\n              adjustRowHeight(column);\r\n            });\r\n          }\r\n        });\r\n      }\r\n    }\r\n\r\n    function prepareStructure($scope){\r\n      var structure = angular.copy($scope.structure);\r\n      adjustRowHeight(structure);\r\n      $scope.preview = structure;\r\n    }\r\n\r\n    return {\r\n      restrict: 'E',\r\n      replace: true,\r\n      scope: {\r\n        name: '=',\r\n        structure: '=',\r\n        selected: '='\r\n      },\r\n      templateUrl: adfTemplatePath + 'structure-preview.html',\r\n      link: prepareStructure\r\n    };\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidgetContent', function($log, $q, widgetService,\r\n          $compile, $controller, $injector, dashboard) {\r\n\r\n    function compileWidget($scope, $element, currentScope) {\r\n      var model = $scope.model;\r\n      var content = $scope.content;\r\n\r\n      // display loading template\r\n      $element.html(dashboard.loadingTemplate);\r\n\r\n      // create new scope\r\n      var templateScope = $scope.$new();\r\n\r\n      // pass config object to scope\r\n      if (!model.config) {\r\n        model.config = {};\r\n      }\r\n\r\n      templateScope.config = model.config;\r\n\r\n      // local injections\r\n      var base = {\r\n        $scope: templateScope,\r\n        widget: model,\r\n        config: model.config\r\n      };\r\n\r\n      // get resolve promises from content object\r\n      var resolvers = {};\r\n      resolvers.$tpl = widgetService.getTemplate(content);\r\n      if (content.resolve) {\r\n        angular.forEach(content.resolve, function(promise, key) {\r\n          if (angular.isString(promise)) {\r\n            resolvers[key] = $injector.get(promise);\r\n          } else {\r\n            resolvers[key] = $injector.invoke(promise, promise, base);\r\n          }\r\n        });\r\n      }\r\n\r\n      // resolve all resolvers\r\n      $q.all(resolvers).then(function(locals) {\r\n        angular.extend(locals, base);\r\n\r\n        // pass resolve map to template scope as defined in resolveAs\r\n        if (content.resolveAs){\r\n          templateScope[content.resolveAs] = locals;\r\n        }\r\n\r\n        // compile & render template\r\n        var template = locals.$tpl;\r\n        $element.html(template);\r\n        if (content.controller) {\r\n          var templateCtrl = $controller(content.controller, locals);\r\n          if (content.controllerAs) {\r\n            templateScope[content.controllerAs] = templateCtrl;\r\n          }\r\n          $element.children().data('$ngControllerController', templateCtrl);\r\n        }\r\n        $compile($element.contents())(templateScope);\r\n      }, function(reason) {\r\n        // handle promise rejection\r\n        var msg = 'Could not resolve all promises';\r\n        if (reason) {\r\n          msg += ': ' + reason;\r\n        }\r\n        $log.warn(msg);\r\n        $element.html(dashboard.messageTemplate.replace(/{}/g, msg));\r\n      });\r\n\r\n      // destroy old scope\r\n      if (currentScope) {\r\n        currentScope.$destroy();\r\n      }\r\n\r\n      return templateScope;\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      scope: {\r\n        model: '=',\r\n        content: '='\r\n      },\r\n      link: function($scope, $element) {\r\n        var currentScope = compileWidget($scope, $element, null);\r\n        $scope.$on('widgetConfigChanged', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n        $scope.$on('widgetReload', function() {\r\n          currentScope = compileWidget($scope, $element, currentScope);\r\n        });\r\n      }\r\n    };\r\n\r\n  });\r\n","\r\n/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n\r\n/**\r\n * The widget service provide helper functions to render widgets and their content.\r\n */\r\nangular.module('adf')\r\n  .factory('widgetService', function($http, $q, $sce, $templateCache, dashboard) {\r\n    'use strict';\r\n\r\n    function parseUrl(url) {\r\n      var parsedUrl = url;\r\n      if (url.indexOf('{widgetsPath}') >= 0) {\r\n        parsedUrl = url.replace('{widgetsPath}', dashboard.widgetsPath)\r\n                .replace('//', '/');\r\n        if (parsedUrl.indexOf('/') === 0) {\r\n          parsedUrl = parsedUrl.substring(1);\r\n        }\r\n      }\r\n      return parsedUrl;\r\n    }\r\n\r\n    var exposed = {};\r\n\r\n    exposed.getTemplate = function(widget){\r\n      var deferred = $q.defer();\r\n\r\n      if (widget.template) {\r\n        deferred.resolve(widget.template);\r\n      } else if (widget.templateUrl) {\r\n        // try to fetch template from cache\r\n        var tpl = $templateCache.get(widget.templateUrl);\r\n        if (tpl) {\r\n          deferred.resolve(tpl);\r\n        } else {\r\n          var url = $sce.getTrustedResourceUrl(parseUrl(widget.templateUrl));\r\n          $http.get(url)\r\n               .success(function(response) {\r\n                 // put response to cache, with unmodified url as key\r\n                 $templateCache.put(widget.templateUrl, response);\r\n                 deferred.resolve(response);\r\n               })\r\n               .error(function() {\r\n                 deferred.reject('could not load template');\r\n               });\r\n        }\r\n      }\r\n\r\n      return deferred.promise;\r\n    };\r\n\r\n    return exposed;\r\n  });\r\n","/*\r\n * The MIT License\r\n *\r\n * Copyright (c) 2015, Sebastian Sdorra\r\n *\r\n * Permission is hereby granted, free of charge, to any person obtaining a copy\r\n * of this software and associated documentation files (the \"Software\"), to deal\r\n * in the Software without restriction, including without limitation the rights\r\n * to use, copy, modify, merge, publish, distribute, sublicense, and/or sell\r\n * copies of the Software, and to permit persons to whom the Software is\r\n * furnished to do so, subject to the following conditions:\r\n *\r\n * The above copyright notice and this permission notice shall be included in\r\n * all copies or substantial portions of the Software.\r\n *\r\n * THE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\r\n * IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\r\n * FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\r\n * AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\r\n * LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\r\n * OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\r\n * SOFTWARE.\r\n */\r\n\r\n'use strict';\r\n\r\nangular.module('adf')\r\n  .directive('adfWidget', function($injector, $q, $log, $uibModal, $rootScope, dashboard, adfTemplatePath) {\r\n\r\n    function preLink($scope) {\r\n      var definition = $scope.definition;\r\n\r\n      //passs translate function from dashboard so we can translate labels inside html templates\r\n      $scope.translate = dashboard.translate;\r\n\r\n      if (definition) {\r\n        var w = dashboard.widgets[definition.type];\r\n        if (w) {\r\n          // pass title\r\n          if (!definition.title) {\r\n            definition.title = w.title;\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.titleTemplateUrl = adfTemplatePath + 'widget-title.html';\r\n            if (w.titleTemplateUrl) {\r\n              definition.titleTemplateUrl = w.titleTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.editTemplateUrl) {\r\n            definition.editTemplateUrl = adfTemplatePath + 'widget-edit.html';\r\n            if (w.editTemplateUrl) {\r\n              definition.editTemplateUrl = w.editTemplateUrl;\r\n            }\r\n          }\r\n\r\n          if (!definition.titleTemplateUrl) {\r\n            definition.frameless = w.frameless;\r\n          }\r\n\r\n          if (!definition.styleClass) {\r\n            definition.styleClass = w.styleClass;\r\n          }\r\n\r\n          // set id for sortable\r\n          if (!definition.wid) {\r\n            definition.wid = dashboard.id();\r\n          }\r\n\r\n          // pass copy of widget to scope\r\n          $scope.widget = angular.copy(w);\r\n\r\n          // create config object\r\n          var config = definition.config;\r\n          if (config) {\r\n            if (angular.isString(config)) {\r\n              config = angular.fromJson(config);\r\n            }\r\n          } else {\r\n            config = {};\r\n          }\r\n\r\n          // pass config to scope\r\n          $scope.config = config;\r\n\r\n          // collapse exposed $scope.widgetState property\r\n          if (!$scope.widgetState) {\r\n            $scope.widgetState = {};\r\n            $scope.widgetState.isCollapsed= (w.collapsed === true) ? w.collapsed : false;\r\n          }\r\n\r\n        } else {\r\n          $log.warn('could not find widget ' + definition.type);\r\n        }\r\n      } else {\r\n        $log.debug('definition not specified, widget was probably removed');\r\n      }\r\n    }\r\n\r\n    function postLink($scope, $element) {\r\n      var definition = $scope.definition;\r\n      if (definition) {\r\n        // bind close function\r\n\r\n        var deleteWidget = function() {\r\n          var column = $scope.col;\r\n          if (column) {\r\n            var index = column.widgets.indexOf(definition);\r\n            if (index >= 0) {\r\n              column.widgets.splice(index, 1);\r\n            }\r\n          }\r\n          $element.remove();\r\n          $rootScope.$broadcast('adfWidgetRemovedFromColumn');\r\n        };\r\n\r\n        $scope.remove = function() {\r\n          if ($scope.options.enableConfirmDelete) {\r\n            var deleteScope = $scope.$new();\r\n            deleteScope.translate = dashboard.translate;\r\n\r\n            var deleteTemplateUrl = adfTemplatePath + 'widget-delete.html';\r\n            if (definition.deleteTemplateUrl) {\r\n              deleteTemplateUrl = definition.deleteTemplateUrl;\r\n            }\r\n            var opts = {\r\n              scope: deleteScope,\r\n              templateUrl: deleteTemplateUrl,\r\n              backdrop: 'static'\r\n            };\r\n            var instance = $uibModal.open(opts);\r\n\r\n            deleteScope.closeDialog = function() {\r\n              instance.close();\r\n              deleteScope.$destroy();\r\n            };\r\n            deleteScope.deleteDialog = function() {\r\n              deleteWidget();\r\n              deleteScope.closeDialog();\r\n            };\r\n          } else {\r\n            deleteWidget();\r\n          }\r\n        };\r\n\r\n        // bind reload function\r\n        $scope.reload = function() {\r\n          $scope.$broadcast('widgetReload');\r\n        };\r\n\r\n        // bind edit function\r\n        $scope.edit = function() {\r\n          var editScope = $scope.$new();\r\n          editScope.translate = dashboard.translate;\r\n          editScope.definition = angular.copy(definition);\r\n\r\n          var adfEditTemplatePath = adfTemplatePath + 'widget-edit.html';\r\n          if (definition.editTemplateUrl) {\r\n            adfEditTemplatePath = definition.editTemplateUrl;\r\n          }\r\n\r\n          var opts = {\r\n            scope: editScope,\r\n            templateUrl: adfEditTemplatePath,\r\n            backdrop: 'static'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n\r\n          editScope.closeDialog = function() {\r\n            instance.close();\r\n            editScope.$destroy();\r\n          };\r\n\r\n          // TODO create util method\r\n          function createApplyPromise(result){\r\n            var promise;\r\n            if (typeof result === 'boolean'){\r\n              var deferred = $q.defer();\r\n              if (result){\r\n                deferred.resolve();\r\n              } else {\r\n                deferred.reject();\r\n              }\r\n              promise = deferred.promise;\r\n            } else {\r\n              promise = $q.when(result);\r\n            }\r\n            return promise;\r\n          }\r\n\r\n          editScope.saveDialog = function() {\r\n            // clear validation error\r\n            editScope.validationError = null;\r\n\r\n            // build injection locals\r\n            var widget = $scope.widget;\r\n\r\n            // create a default apply method for widgets\r\n            // without edit mode\r\n            // see issue https://goo.gl/KHPQLZ\r\n            var applyFn;\r\n            if (widget.edit){\r\n              applyFn = widget.edit.apply;\r\n            } else {\r\n              applyFn = function(){\r\n                return true;\r\n              };\r\n            }\r\n\r\n            // injection locals\r\n            var locals = {\r\n              widget: widget,\r\n              definition: editScope.definition,\r\n              config: editScope.definition.config\r\n            };\r\n\r\n            // invoke apply function and apply if success\r\n            var result = $injector.invoke(applyFn, applyFn, locals);\r\n            createApplyPromise(result).then(function(){\r\n              definition.title = editScope.definition.title;\r\n              angular.extend(definition.config, editScope.definition.config);\r\n              if (widget.edit && widget.edit.reload) {\r\n                // reload content after edit dialog is closed\r\n                $scope.$broadcast('widgetConfigChanged');\r\n              }\r\n              editScope.closeDialog();\r\n            }, function(err){\r\n              if (err){\r\n                editScope.validationError = err;\r\n              } else {\r\n                editScope.validationError = 'Validation durring apply failed';\r\n              }\r\n            });\r\n          };\r\n\r\n        };\r\n      } else {\r\n        $log.debug('widget not found');\r\n      }\r\n    }\r\n\r\n    return {\r\n      replace: true,\r\n      restrict: 'EA',\r\n      transclude: false,\r\n      templateUrl: dashboard.customWidgetTemplatePath ? dashboard.customWidgetTemplatePath : adfTemplatePath + 'widget.html',\r\n      scope: {\r\n        definition: '=',\r\n        col: '=column',\r\n        editMode: '=',\r\n        options: '=',\r\n        widgetState: '='\r\n      },\r\n      controller: function($scope) {\r\n\r\n        $scope.$on('adfDashboardCollapseExpand', function(event, args) {\r\n          $scope.widgetState.isCollapsed = args.collapseExpandStatus;\r\n        });\r\n\r\n        $scope.$on('adfWidgetEnterEditMode', function(event, widget){\r\n          if (dashboard.idEquals($scope.definition.wid, widget.wid)){\r\n            $scope.edit();\r\n          }\r\n        });\r\n\r\n        $scope.widgetClasses = function(w, definition){\r\n          var classes = definition.styleClass || '';\r\n          if (!w.frameless || $scope.editMode){\r\n            classes += ' panel panel-default';\r\n          }\r\n          return classes;\r\n        };\r\n\r\n        $scope.openFullScreen = function() {\r\n          var definition = $scope.definition;\r\n          var fullScreenScope = $scope.$new();\r\n          var opts = {\r\n            scope: fullScreenScope,\r\n            templateUrl: adfTemplatePath + 'widget-fullscreen.html',\r\n            size: definition.modalSize || 'lg', // 'sm', 'lg'\r\n            backdrop: 'static',\r\n            windowClass: (definition.fullScreen) ? 'dashboard-modal widget-fullscreen' : 'dashboard-modal'\r\n          };\r\n\r\n          var instance = $uibModal.open(opts);\r\n          fullScreenScope.closeDialog = function() {\r\n            instance.close();\r\n            fullScreenScope.$destroy();\r\n          };\r\n        };\r\n      },\r\n      compile: function() {\r\n\r\n        /**\r\n         * use pre link, because link of widget-content\r\n         * is executed before post link widget\r\n         */\r\n        return {\r\n          pre: preLink,\r\n          post: postLink\r\n        };\r\n      }\r\n    };\r\n\r\n  });\r\n"],"sourceRoot":"/source/"}